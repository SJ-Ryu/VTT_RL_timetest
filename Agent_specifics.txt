
--------------------------------------------------------------agent_xyIncrease_cnn2d_v1.02.pth
class DQN(nn.Module):

    def __init__(self, outputs):
        super(DQN, self).__init__()
        self.conv1 = nn.Conv2d(1, 4, kernel_size=5, stride=2)
        self.bn1 = nn.BatchNorm2d(4)
        self.conv2 = nn.Conv2d(4, 6, kernel_size=3, stride=1)
        self.bn2 = nn.BatchNorm2d(6)
        self.fc1 = nn.Linear(1872, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, outputs)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.to(device)
        x = self.bn1(self.conv1(x))
        x = self.bn2(self.conv2(x))
        x = x.view(-1, math.prod(x.shape))
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        out = self.fc3(x)

        return out


BATCH_SIZE = 1  # 256 64 1
GAMMA = 0.999
EPS_START = 0.5
EPS_END = 0.01
EPS_DECAY = 200
TARGET_UPDATE = 100
LEARNING_RATE = 0.01  # 0.001 0.01

--------------------------------------------------------------agent_xyIncrease_cnn2d_v1.03.pth
class DQN(nn.Module):

    def __init__(self, outputs):
        super(DQN, self).__init__()
        self.conv1 = nn.Conv2d(1, 4, kernel_size=7, stride=3)
        self.bn1 = nn.BatchNorm2d(4)
        self.conv2 = nn.Conv2d(4, 6, kernel_size=5, stride=1)
        self.bn2 = nn.BatchNorm2d(6)
        self.fc1 = nn.Linear(14406, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, outputs)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.to(device)
        x = self.bn1(self.conv1(x))
        x = self.bn2(self.conv2(x))
        x = x.view(-1, math.prod(x.shape))
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        out = self.fc3(x)

        return out


BATCH_SIZE = 1  # 256 64 1
GAMMA = 0.999
EPS_START = 0.5
EPS_END = 0.01
EPS_DECAY = 200
TARGET_UPDATE = 100
LEARNING_RATE = 0.01  # 0.001 0.01

--------------------------------------------------------------agent_xyIncrease_cnn2d_v1.04
class DQN(nn.Module):

    def __init__(self, outputs):
        super(DQN, self).__init__()
        self.conv1 = nn.Conv2d(1, 4, kernel_size=11, stride=5)
        self.bn1 = nn.BatchNorm2d(4)
        self.conv2 = nn.Conv2d(4, 6, kernel_size=5, stride=1)
        self.bn2 = nn.BatchNorm2d(6)
        self.conv3 = nn.Conv2d(6, 16, kernel_size=3, stride=1)
        self.bn3 = nn.BatchNorm2d(16)
        self.fc1 = nn.Linear(10000, 2000)
        self.fc2 = nn.Linear(2000, 400)
        self.fc3 = nn.Linear(400, outputs)
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = x.to(device)
        x = self.bn1(self.conv1(x))
        x = self.bn2(self.conv2(x))
        x = self.bn3(self.conv3(x))
        x = x.view(-1, math.prod(x.shape))
        x = F.relu(self.fc1(x))
        x = self.dropout(x)
        x = F.relu(self.fc2(x))
        x = self.dropout(x)
        out = self.fc3(x)

        return out

BATCH_SIZE = 1  # 256 64 1
GAMMA = 0.999
EPS_START = 0.5
EPS_END = 0.01
EPS_DECAY = 200
TARGET_UPDATE = 100
LEARNING_RATE = 0.01  # 0.001 0.01